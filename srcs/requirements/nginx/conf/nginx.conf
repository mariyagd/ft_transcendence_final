user www-data;

events {
    worker_connections 1024;
}

http {
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    include /etc/nginx/mime.types;

    server {
        listen 80 default_server;
        server_name ${DOMAIN_NAME};

        # This code listens on port 80 (HTTP) and when a request is received,
        # it returns a 301 redirect to the same URL but with the HTTPS scheme.
        # The $host variable contains the hostname of the requested URL,
        # and the $request_uri variable contains the rest of the requested URL.
        # $scheme contains the scheme of the received request (http or https).
        # The if statement redirects only http requests to https
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl default_server;
        server_name ${DOMAIN_NAME};
        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers on;

        server_tokens off;

        #--------------------------------------------------------------------------------------------------------------------------------------------------------------------

        # Clickjacking: Web Browser will only display the page in a frame if the page requesting the frame is from the same origin as the page being framed
        add_header X-Frame-Options "SAMEORIGIN" always;

        # XSS: Web Browser will not try to guess the MIME type of a file
        add_header X-Content-Type-Options "nosniff";

        # XSS: Disable this header because is not supported from moderns browsers
        add_header X-Xss-Protection "0";

        # XSS: Image and scripts are not allowed to be loaded from a different domain
        add_header Cross-Origin-Resource-Policy "cross-origin" always;

        # XSS: Trust only the content from the same domain, bootstrap or api
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://localhost https://cdn.jsdelivr.net; style-src 'self' https://cdn.jsdelivr.net; img-src 'self' https://pong.42lausanne.ch:8000 https://localhost:8000 https://localhost data:; connect-src 'self' https://localhost:8000 https://pong.42lausanne.ch:8000 http://localhost http://localhost/contracts https://localhost/contracts ws://localhost:* wss://localhost:* http://ganache:8545; font-src 'self' https://fonts.gstatic.com; frame-ancestors 'none';" always;
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://localhost https://cdn.jsdelivr.net; style-src 'self' https://cdn.jsdelivr.net; img-src 'self' https://pong.42lausanne.ch:8000 https://localhost:8000 https://localhost data:; connect-src 'self' https://localhost:8000 https://pong.42lausanne.ch:8000 https://localhost/contracts https://localhost/ganache ws://localhost:* wss://localhost:*; font-src 'self' https://fonts.gstatic.com; frame-ancestors 'none';" always;
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://localhost https://cdn.jsdelivr.net; style-src 'self' https://cdn.jsdelivr.net; img-src 'self' https://pong.42lausanne.ch:8000 https://localhost:8000 https://localhost data:; connect-src 'self' https://localhost:8000 https://pong.42lausanne.ch:8000 https://localhost/contracts https://localhost/ganache ws://localhost:* wss://localhost:*; font-src 'self' https://fonts.gstatic.com; frame-ancestors 'none';" always;
		add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://localhost/ https://cdn.jsdelivr.net/; style-src 'self' https://cdn.jsdelivr.net/; img-src 'self' https://pong.42lausanne.ch/ https://localhost/ data:; connect-src 'self' https://localhost:8000/ https://pong.42lausanne.ch:8000/ https://localhost/contracts https://localhost/ganache https://pong.42lausanne.ch/ganache ws://localhost:* wss://localhost:*; font-src 'self' https://fonts.gstatic.com/; frame-ancestors 'none';" always;

        # Https: The browser will only connect to the server using HTTPS
        add_header Strict-Transport-Security: max-age=63072000;

        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=()";

        # Don't send the Referer header for requests to less secure destinations
        add_header Referrer-Policy "same-origin";

        #--------------------------------------------------------------------------------------------------------------------------------------------------------------------

        # Define the root path for all site files: statics files and media
        root ${SITE_PATH}/static;
        index index.html;

        location /media/ {
            alias ${SITE_PATH}/media/;
        }

        location /profile_photos/ {
            alias ${SITE_PATH}/profile_photos/;

            if ($uri !~* \.(jpg|jpeg|png)$) {
                return 403;
            }
        }

        location /static/ {
            alias ${SITE_PATH}/static/;
        }

        location /errors/images/ {
            alias ${SITE_PATH}/errors/images/;
        }

        error_page 404 /errors/custom_404.html;
        error_page 500 502 503 504 /errors/custom_500.html;

        location /errors/ {
            alias ${SITE_PATH}/errors/;
            internal;
        }

        location /contracts/ {
            alias /var/www/html/contracts/;
            autoindex on;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
        }


        location /ganache/ {
            proxy_pass http://ganache:8545;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
        }

        #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
        location /api/ {

            location /api/user/flush/ {
                deny all;            # Bloquer l'accès pour tous les autres
            }

            location /api/user/show/ {
                deny all;            # Bloquer l'accès pour tous les autres
            }

            limit_except GET POST PATCH PUT {
                deny all;
            }

            # if the request is for the API, it is redirected to the auth service
            proxy_pass http://auth:8000;

            # nginx sends the original host header to the proxied server
            proxy_set_header Host $host;

            # header that contains ONLY the IP address of the client
            proxy_set_header X-Real-IP $remote_addr;

            # sends to Django the client's IP and a series of IP addresses that trace the path of the request through various proxies.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Informs django the original http connection of the client
            proxy_set_header X-Forwarded-Proto https;

            # Send the authorization header to django (e.g. Bearer <token>)
            proxy_set_header Authorization $http_authorization;

            add_header Content-Security-Policy "default-src 'self'; script-src 'self';" always;
            add_header 'Access-Control-Allow-Origin' 'https://pong.42lausanne.ch' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'accept, authorization, content-type, user-agent' always;
        }
    }
}
